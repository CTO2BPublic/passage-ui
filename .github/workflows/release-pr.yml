name: Deploy PR

on:
  pull_request:
    branches:
      - main

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  build-and-push:
    name: Build and Deploy PR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$(basename ${{ github.repository }})
          IMAGE_NAME=${IMAGE_NAME,,}  # Convert to lowercase
          PR_NUMBER=${{ github.event.pull_request.number }}
          GIT_SHA=$(git rev-parse --short HEAD)     

          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "IMAGE_TAG=pr-${PR_NUMBER}-${GIT_SHA}" >> $GITHUB_ENV
          echo "INSTANCE=pr-${PR_NUMBER}" >> $GITHUB_ENV
          echo "APP_ID=prod-shared-e08a-passage-dev-pr-${PR_NUMBER}" >> $GITHUB_ENV

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker Image
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Deploy SVIEW
        run: |
          # Check if deployment exists
          EXISTS_RESPONSE=$(curl -s -X GET "https://api.sview.prod.manage.cto2b.eu/applications/${{env.APP_ID}}/exists" \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -H "Content-Type: application/json")

          EXISTS=$(echo "$EXISTS_RESPONSE" | jq -r '.exists')

          # Read the YAML file as a raw string
          VALUES_YAML=$(cat deployment/values.yaml | sed 's/"/\\"/g' | awk '{printf "%s\\n", $0}')

          if [[ "$EXISTS" == "true" ]]; then
            echo "🔄 Application exists, updating deployment..."
            curl -s -X PUT "https://api.sview.prod.manage.cto2b.eu/applications/${{env.APP_ID}}/parameters" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
              -d '{
                "parameters": [
                  {"name": "image.tag", "value": "'"${{ env.IMAGE_TAG }}"'"},
                  {"name": "github.author", "value": "'"${{ github.event.pusher.name }}"'"}
                ],
                "values": "'"$VALUES_YAML"'"
              }'
          else
            echo "🚀 Application does not exist, creating a new deployment..."
            curl -s -X PUT "https://api.sview.prod.manage.cto2b.eu/applications" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
              -d '{
                "metadata": {
                  "stage": "prod",
                  "environment": "shared",
                  "instance": "'"${{ env.INSTANCE }}"'", 
                  "namespace": "passage-dev",
                  "cloud": "aws",
                  "group": "passage-dev-pr"
                },
                "parameters": [
                  {"name": "image.tag", "value": "'"${{ env.IMAGE_TAG }}"'"},
                  {"name": "github.author", "value": "'"${{ github.event.pull_request.user.login }}"'"}
                ],
                "type": "app-k8s-generic",
                "helm_repo": "https://gitlab.com/cto2bprivate/main/infrastructure/public/charts/charts",
                "helm_chart": "app-k8s-generic",
                "helm_path": "",
                "values": "'"$VALUES_YAML"'"
              }'
          fi

      - name: Add PR comment with link
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO_OWNER=${{ github.repository_owner }}
          REPO_NAME=${{ github.event.repository.name }}

          COMMENT_BODY=$(cat <<EOF
🚀 Deployment successful!  
Manage your app at:  
🔗 [Management Panel](https://sview.prod.manage.cto2b.eu/applications/${{ env.APP_ID }})  

🖥️ View the deployed UI:  
🔗 [Live Preview](https://pr-$PR_NUMBER.passage-dev.shared.prod.cto2b.eu/access-requests)  

⚠️ **Note:** This deployment will be **automatically destroyed** once the PR is merged or closed.
EOF
          )

          curl -s -X POST "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$PR_NUMBER/comments" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$COMMENT_BODY\"}"

      - name: Delete Deployment via API
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        run: |
          # Call the API to delete the deployment
          curl -s -X DELETE "https://api.sview.prod.manage.cto2b.eu/applications/${{env.APP_ID}}" \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}"
