name: Docker Build and GitHub Release

on:
  push:
    tags:
      - "v*.*.*" # Run on version tags like v1.0.0
  pull_request:
    branches:
      - main # Adjust if needed

permissions:
  contents: write
  packages: write

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$(basename ${{ github.repository }})
          IMAGE_NAME=${IMAGE_NAME,,}  # Convert to lowercase
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
            GIT_SHA=$(git rev-parse --short HEAD)
            echo "IMAGE_TAG=pr-${PR_NUMBER}-${GIT_SHA}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" && "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "IMAGE_TAG=${VERSION}" >> $GITHUB_ENV
            echo "PUSH_LATEST=true" >> $GITHUB_ENV
          fi

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker Image
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Tag and Push Latest (Only for Releases)
        if: env.PUSH_LATEST == 'true'
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:latest

      - name: Deploy via API (for PR)
        if: github.event_name == 'pull_request'
        run: |
          # Replace placeholders in values.yaml

          # Read the YAML file as a raw string
          VALUES_YAML=$(cat deployment/values.yaml | sed 's/"/\\"/g' | awk '{printf "%s\\n", $0}')

          # Send the API request with the YAML values
          curl -X PUT "https://api.sview.prod.manage.cto2b.eu/applications" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
            -d '{
              "metadata": {
                "stage": "prod",
                "environment": "shared",
                "instance": "pr-'"${{ env.IMAGE_TAG }}"'", 
                "namespace": "passage-dev",
                "cloud": "aws",
                "group": "passage-dev"
              },
              "parameters": [
              {"name": "image.tag", "value": "'"$env.IMAGE_TAG"'"}
              ],
              "type": "app-k8s-generic",
              "helm_repo": "https://gitlab.com/cto2bprivate/main/infrastructure/public/charts/charts",
              "helm_chart": "app-k8s-generic",
              "helm_path": "",
              "values": "'"$VALUES_YAML"'"
            }'

      - name: Add PR comment with link
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO_OWNER=${{ github.repository_owner }}
          REPO_NAME=${{ github.event.repository.name }}

          COMMENT_BODY="Deployment successful! View your app at: https://example.com/your-app/${PR_NUMBER}"

          # Make the API request to add a comment to the PR using the GITHUB_TOKEN
          curl -X POST "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/issues/$PR_NUMBER/comments" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -d '{"body": "'"$COMMENT_BODY"'"}'

      - name: Delete Deployment via API (on PR Close Without Merge)
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == false
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          DEPLOYMENT_ID="prod-shared-e08a-passage-dev-pr-${PR_NUMBER}"

          # Call the API to delete the deployment
          curl -X DELETE "https://api.sview.prod.manage.cto2b.eu/applications/$DEPLOYMENT_ID" \
            -H "Authorization: Bearer ${{ secrets.API_TOKEN }}"

  release:
    name: Create GitHub Release
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: "Auto-generated release notes."
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
