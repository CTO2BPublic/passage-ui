name: Docker Build and GitHub Release

on:
  push:
    tags:
      - "v*.*.*" # Run on version tags like v1.0.0
  pull_request:
    branches:
      - main # Adjust if needed

permissions:
  contents: write
  packages: write

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata
        id: meta
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$(basename ${{ github.repository }})
          IMAGE_NAME=${IMAGE_NAME,,}  # Convert to lowercase
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER=${{ github.event.pull_request.number }}
            GIT_SHA=$(git rev-parse --short HEAD)
            echo "IMAGE_TAG=pr-${PR_NUMBER}-${GIT_SHA}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "push" && startsWith(github.ref, 'refs/tags/') ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "IMAGE_TAG=${VERSION}" >> $GITHUB_ENV
            echo "PUSH_LATEST=true" >> $GITHUB_ENV
          fi

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker Image
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Tag and Push Latest (Only for Releases)
        if: env.PUSH_LATEST == 'true'
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:latest

  release:
    name: Create GitHub Release
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: "Auto-generated release notes."
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
