name: Docker Build and GitHub Release

on:
  push:
    tags:
      - "v*.*.*" # Run on version tags like v1.0.0
  pull_request:
    branches:
      - main # Adjust if needed

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract tag version (only for releases)
        if: startsWith(github.ref, 'refs/tags/')
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Define Image Name
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/$(basename ${{ github.repository }})
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> $GITHUB_ENV  # Convert to lowercase

      - name: Build Docker Image
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Tag Image (PR builds use temporary tags)
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            docker tag ${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            docker tag ${{ env.IMAGE_NAME }} ${{ env.IMAGE_NAME }}:latest
          fi

      - name: Push Docker Image (Only on Version Tags)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          docker push ${{ env.IMAGE_NAME }}:latest

  release:
    name: Create GitHub Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          body: "Auto-generated release notes."
          generateReleaseNotes: true
          token: ${{ secrets.GITHUB_TOKEN }}
